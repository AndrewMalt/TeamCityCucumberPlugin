apply plugin: 'java-library'
apply plugin: "com.diffplug.spotless"
apply plugin: 'io.qameta.allure'

group 'org.example'
//version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
        classpath "io.qameta.allure:allure-cucumber7-jvm:${allureVersion}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.18.0"
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

allure {
    autoconfigure = true
    version = "${allureVersion}"

//    useCucumber2JVM {
//        version = "${allureVersion}"
//    }
}

spotless {
    java {
        targetExclude 'build/generated-sources/**'
        googleJavaFormat()
    }
}

dependencies {

    //JUnit5
    implementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    //Cucumber
    implementation 'io.cucumber:cucumber-java:7.11.1'
    implementation 'io.cucumber:cucumber-junit:7.11.1'

    //Rest-assured
    implementation 'io.rest-assured:rest-assured:5.3.0'

    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'com.typesafe:config:1.4.2'

    //assertj-core
    implementation 'org.assertj:assertj-core:3.24.2'


    //jackson
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'

    //allure
    implementation "io.qameta.allure:allure-cucumber7-jvm:${allureVersion}"
    implementation "io.qameta.allure:allure-selenide:${allureVersion}"
    implementation "io.qameta.allure:allure-rest-assured:${allureVersion}"
    implementation "io.qameta.allure:allure-java-commons:${allureVersion}"

    //kafka
    implementation "org.apache.kafka:kafka-clients:3.4.0"

    //browserup-proxy-core
    implementation 'com.browserup:browserup-proxy-core:2.1.2'

    //lombok
    implementation 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    //httpComponents
    api group: 'commons-io', name: 'commons-io', version: '2.11.0'

    //selenide
    implementation 'com.codeborne:selenide:6.14.1'

    implementation files('src/main/resources/qwer-2.0.jar')

    // https://mvnrepository.com/artifact/org.owasp.encoder/encoder
    implementation 'org.owasp.encoder:encoder:1.2.3'

    // https://mvnrepository.com/artifact/org.owasp.esapi/esapi
    implementation 'org.owasp.esapi:esapi:2.5.2.0'

    // DataBase
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.h2database:h2:2.1.214'
    implementation 'org.springframework.boot:spring-boot-starter-test:2.6.5'
    implementation 'org.springframework:spring-jdbc:5.3.10'


//    implementation 'org.springframework.data:spring-data-jdbc:3.0.6'
//    implementation 'org.springframework.retry:spring-retry:2.0.0'

}

configurations.implementation.setCanBeResolved(true)
configurations.runtimeOnly.setCanBeResolved(true)

//task downloadDependencies(type: Exec) {
//    configurations.implementation.files + configurations.runtimeOnly.files
//    finalizedBy "cacheToMavenLocal"
//    commandLine "echo", "Downloaded all dependencies and copied to mavenLocal"
//}
//
task cacheToMavenLocal(type: Copy) {
    from new File(gradle.gradleUserHomeDir, "caches/modules-2/files-2.1")
    into "lib2"
    eachFile {
        List<String> parts = it.path.split("/")
        it.path = [parts[0].replace(".","/"), parts[1], parts[2], parts[4]].join("/")
    }
    includeEmptyDirs false
}

allprojects {
    tasks.register("downloadDependencies", Copy) { Copy copy ->
        copy.into "dep"
        copy.from {
            configurations.matching { Configuration c ->
                c.isCanBeResolved()
            }.collect { Configuration c ->
                c.resolve()
            }.flatten().unique()
        }
    }
}

test {
    useJUnitPlatform()
}

configurations {
    cucumberRuntime {
        extendsFrom implementation
    }
}

//task bigJar(type: Jar) {
////jar {
//    manifest {
//        attributes "Main-Class": "io.cucumber.core.cli.Main"
//    }
//    baseName = '1'
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    from sourceSets.main.output + sourceSets.test.output
//    into 'src/main/resources', {
//        from 'src/main/resources'
//    }
//    into 'src/test/resources', {
//        from 'src/test/resources'
//    }
////    with jar
//
//}

task runProp(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    setMainClass("src/test/java/SysVarTest.java")
    System.properties.each { k, v ->
        systemProperty k, v
    }
//    mainClass = "src/test/java/SysVarTest.java"
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {

            System.properties.each { k, v ->
                systemProperty k, v
            }

            mainClass = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty',
                    '--plugin', 'plugins.TeamCityPlugin',
//                    '--plugin', 'io.cucumber.core.plugin.TeamCityPlugin',
//                    '--plugin', 'core.api.TagCollectorPlugin',
                    '--threads', '1',
//                    '--threads', '3',
//                    '--plugin', 'teamcity',
//                    '--glue', 'gradle.cucumber',
//                    '--glue', 'TeamCityCucumberPlugin.hooks',
//                    '--glue', 'hooks',
//                   'TeamCityCucumberPlugin.steps',
                    'src']
//                    'src/test/resources']
            ignoreExitValue = true
        }
    }
}